{"version":3,"sources":["components/commons/card.module.css","components/covid-19/covid19.module.css","components/api/index.js","components/charts/charts.js","components/countries/country.js","components/Navigation/navigation.jsx","components/commons/card.js","components/covid-19/covid19.js","components/app/App.js","serviceWorker.js","index.js"],"names":["module","exports","url","fetchData","a","axios","get","data","confirmed","recovered","deaths","fetchCountriesData","countries","console","log","map","country","name","fetchOneCountryData","Chart","state","nextProps","this","setState","count","className","labels","datasets","label","backgroundColor","value","options","legend","display","title","text","style","textAlign","marginTop","tip","Component","Country","globaldata","countryChange","onChange","e","target","i","key","Card","props","cases","color","styles","mycard","start","end","duration","separator","Covid19","cardcontainer","App","margin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d2526e39.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"red\":\"card_red__Cgcky\",\"mycard\":\"card_mycard__1N0zQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardcontainer\":\"covid19_cardcontainer__KMzDw\"};","import axios from 'axios';\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async()=>{\r\n    const {data:{confirmed,recovered,deaths}} = await axios.get(url);\r\n    return {confirmed,recovered,deaths};\r\n}\r\n\r\n\r\nexport const fetchCountriesData = async()=>{\r\n    const {data:{countries}} = await axios.get(`${url}/countries`);\r\n    console.log(countries);\r\n    return countries.map((country)=>country.name);\r\n};\r\nexport const fetchOneCountryData = async(country)=>{\r\n        const {data} = await axios.get(`${url}/countries/${country}`);\r\n        return data;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport './charts.css';\r\nimport { Spin } from 'antd';\r\nimport {  Bar } from 'react-chartjs-2';\r\n\r\nclass Chart extends Component {\r\n    state = {\r\n        data:{},\r\n        country:'',\r\n    }\r\n\r\n   componentWillReceiveProps(nextProps){\r\n       this.setState({country:nextProps.country,data:nextProps.data});\r\n\r\n   }\r\n    render() { \r\n        const {data,country,count} = this.state;\r\n        const {confirmed,recovered,deaths} = {data};\r\n        if(!data) return (<div style={{textAlign:\"center\",marginTop:\"30px\"}} ><Spin tip=\"Loading...\"/>Loading... </div>)\r\n        if(!data.confirmed) return (<div style={{textAlign:\"center\",marginTop:\"30px\"}} ><Spin/>Loading... </div>)\r\n        return (\r\n            <div className=\"barChart\">\r\n    {data.confirmed ? (\r\n      <Bar\r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgba(0, 0, 255, 0.8)', 'rgba(0, 255, 0, 0.8)', 'rgba(255, 0, 0, 0.8)'],\r\n              data: [data.confirmed.value, data.recovered.value, data.deaths.value],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current state in ${country}` },\r\n        }}\r\n      />\r\n    ) : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Chart;","import React, { Component } from \"react\";\r\nimport {fetchCountriesData,fetchOneCountryData} from '../api'\r\nimport './country.css'\r\nimport Chart from '../charts/charts'\r\nclass Country extends Component {\r\n  state = {\r\n      countries:[],\r\n      data:[],\r\n      country:'',\r\n      globaldata:[]\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps){\r\n    this.setState({globaldata:nextProps.data});\r\n  }\r\n  async componentDidMount(){\r\n      const countries = await fetchCountriesData();\r\n      this.setState({countries});\r\n  }\r\n  countryChange = async (country)=>{\r\n    this.setState({country:country});\r\n    const data = await fetchOneCountryData(country);\r\n    this.setState({data,country:country});\r\n  }\r\n  render() {\r\n    const {countries,data,country,globaldata} = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"selectCountry\">\r\n          <select onChange={(e)=>this.countryChange(e.target.value)}>\r\n          <option  value=\"\">Global</option>\r\n          {countries.map((country,i)=> <option name={country} key={i}> {country} </option>)}\r\n          </select>\r\n        </div>\r\n        {!country && <Chart data={globaldata} country=\"Globe\"/>}\r\n        {country && <Chart  data={data} country={country} />}\r\n      </div> \r\n    );\r\n  }\r\n}\r\n\r\nexport default Country;\r\n","import React, { Component } from \"react\";\r\nimport \"./navigation.css\";\r\nimport Country from \"../countries/country\";\r\nimport {Link} from 'react-router-dom';\r\nimport \"antd/dist/antd.css\";\r\nimport { Layout, Menu } from \"antd\";\r\nclass NavBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      count: 0,\r\n    };\r\n  }\r\n\r\n//   componentDidMount() {\r\n//     let proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n//     let url = \"https://www.covidvisualizer.com/api\";\r\n//     fetch(proxyurl + url)\r\n//       .then((response) => response.json())\r\n//       .then((response) => {\r\n//         this.setState({ data: response });\r\n//         console.log(this.state.data);\r\n//         this.setState({ fetched: true });\r\n//         console.log(this.state.data);\r\n//       });\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Layout.Header>\r\n          <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[\"1\"]}>\r\n              <Menu.Item  key=\"1\"><a href=\"/\">Home</a> </Menu.Item>\r\n              <Menu.Item key=\"2\"><a href=\"/covid-19\">Covid-19</a> </Menu.Item>\r\n              <Menu.Item key=\"3\">Support Us</Menu.Item>\r\n          </Menu>\r\n        </Layout.Header>\r\n{/*\r\n\r\n\r\n        {!this.state.data && <p>fetching...</p>}\r\n        {this.state.data && <Country fetchedData={this.state.data} />} */}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport styles from './card.module.css';\r\nimport './card.css';\r\nimport CountUp from 'react-countup';\r\nclass Card extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: props.name,\r\n      cases: props.cases,\r\n      color: props.color\r\n    };\r\n  }\r\n  render() {\r\n    const { name, cases,color } = this.state;\r\n    if(!cases) return (<div>Loading...</div>)\r\n    return ( \r\n        <div className={`${styles.mycard} `}>\r\n          <h2 className={name} >{name}</h2>\r\n          <p><b>Cases: <CountUp  start={ 0} end={cases}  duration={2.75} separator=\",\" /></b></p>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import Card from '../commons/card';\r\nimport {fetchData} from '../api';\r\nimport React, { Component } from 'react';\r\nimport styles from './covid19.module.css';\r\nclass Covid19 extends Component {\r\n  state = { \r\n    confirmed :0,\r\n    recovered :0,\r\n    deaths :0\r\n   }\r\n  async componentDidMount(){\r\n    this.setState(await fetchData());\r\n    \r\n   }\r\n  render() {\r\n    const {confirmed,recovered,deaths} = this.state;\r\n    if(!confirmed) return (<p style={{textAlign:\"center\"}} >Internet connection is slow,refresh the page </p>)\r\n     return (\r\n      <div>\r\n        <h2 style={{textAlign:\"center\"}}>Global Cases</h2>\r\n      <div className={styles.cardcontainer}>\r\n        \r\n        <Card  name=\"Confirmed\" cases={confirmed.value} />\r\n         <Card name=\"Recovered\" cases={recovered.value} />\r\n         <Card name=\"Deaths\" cases={deaths.value} />\r\n      </div>\r\n    </div>\r\n     );\r\n  } \r\n}\r\nexport default Covid19;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Country from '../countries/country'\nimport NavBar from '../Navigation/navigation';\nimport { fetchData } from \"../api\";\nimport \"antd/dist/antd.css\";\nimport {Route,BrowserRouter as Router,Switch} from 'react-router-dom'; \n// import { NavBar } from '../../components';\nimport {Popover,Layout,Input} from 'antd';\nimport Covid19 from '../covid-19/covid19';\nimport PopoverCard from '../commons/card';\nclass App extends Component {\n  state = {  \n    confirmed:[],\n    recovered:0,\n    deaths:0\n  }\n  async componentDidMount(){\n    const {confirmed,recovered,deaths} = await fetchData();\n    this.setState( {confirmed,recovered,deaths});\n  }\n  render() {\n    const data = this.state;\n    return (\n      <div>\n      <h1 style={{textAlign:\"center\",margin:\"0\"}} >COVID-19 VISUALIZER</h1>\n      <Covid19/>\n      <Country data={data} />\n      </div>\n    );\n  } \n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App/>,\r\n   </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}